@startuml

title Toolshop

abstract class ObjectPool <<interface>>
{
    + get(string)
    + get()
    + release()
    + shutdown()
}

class ToolshopInventory
{
    -Map[String, List[Tool]] inventory
    -int numToolsCurrentlyInInventory
    -{static}ToolShopInventory instance
    -{static}bool isShutdown
    -{static}Map[String, int] getInitialToolCounts
    -Map[String, int] categoryCountsCurrent
    -ToolshopInventory(Map[String, int])
    +{static} ToolshopInventory getInstance()
    +Tool get()
    +release(Tool)
    +shutdown()
    +int getNumToolsCurrentlyInInventory()
    +Map[String, int] getCategoryCountsCurrent()
    +String toString()
}
Tool "24" -right-o ToolshopInventory

ObjectPool <|-down- ToolshopInventory
ObjectPool <|-down- CustomerPool

class RentalRecord
{
    -Customer renter
    -List[Purchasable] toolsRented
    -int dayRented
    -int totalRentalTime
    -int dayDue
    +RentalRecord()
    +returnTools()
    +Customer getRenter()
    +List[Purchasable] getToolsRented()
    +int getDayRented()
    +int getTotalRentalTime()
    +int getDueDate()
    +String toString()
}

Store "1" *-- "*" RentalRecord
RentalRecord "1" o-- "1" Customer
RentalRecord o-- "*" Tool

class Store
{
    -List[RentalRecord] rentalRecords
    -Map[String, int] rentalCountByCustomerType
    -ToolshopInventory inventory
    -{static} Store instance
    -int currentTime
    -int dailyRevenue
    -int totalRevenue
    -Store()
    +{static} Store getInstance()
    + update(Observable, List[Purchasable])
    +List[RentalRecord] getRentalRecords()
    +int getCurrentDay()
    +int getCurrentInventoryCount()
    +List[RentalRecord] incrementDay()
    +int getDailyRevenue()
    +int getTotalRevenue()
    +int getRentalsForType(String)
    +int getTotalRentals()
}

Store "1" *-- "1" ToolshopInventory



class Tool
{
    #{static}int TOOL_BASE_PRICE
    -ToolCategory category
    +Tool(ToolCategory)
    +getCategory()
    +int getCost()
    +Tool getTool()
    +List[PurchaseDecorator] getOptions()
}

abstract class ToolCategory
{
    -String category
    -int cost
    +ToolCategory(String, int)
    +getCategoryName()
    +int getPrice()
}

Tool -right- "1" ToolCategory: strategy

class Painting
{
    +Painting()
}
class Concrete
{
    +Concrete()
}
class Plumbing
{
    +Plumbing()
}
class Woodwork
{
    +Woodwork()
}
class Yardwork
{
    +Yardwork()
}

ToolCategory <|-down- Painting
ToolCategory <|-down- Concrete
ToolCategory <|-down- Plumbing
ToolCategory <|-down- Woodwork
ToolCategory <|-down- Yardwork

abstract class Purchasable
{
    #int timeOfRental
    +{abstract} int getCost()
    +{abstract} Tool getTool()
    +{abstract} List[PurchaseDecorator] getOptions()
    +int getTimeOfRental()
    +setTimeOfRental()
}

Purchasable <|-down- Tool

abstract class PurchaseDecorator
{
    +Purchasable purchasable
    +Tool getTool()
    +List[PurchaseDecorator] getOptions()
    +int getCost()
    +int getTimeOfRental()
    +{abstract} String getType()
}

Purchasable <|-down- PurchaseDecorator

class ExtensionCord
class AccessoryKit
class ProtectiveGearPackage

PurchaseDecorator <|-down- ExtensionCord
PurchaseDecorator <|-down- AccessoryKit
PurchaseDecorator <|-down- ProtectiveGearPackage
PurchaseDecorator <|-down- ToolDecoratorAdder


PurchaseDecorator --> Purchasable: component

abstract class Customer
{
    -String name
    #int toolsRented
    +Customer(String)
    +String getName()
    +{abstract}String getType()
    +{abstract}int getNumToolsToRent()
    +{abstract}int getRentalTime()
    +returnTools(int)
    #int getToolCategoryIndexToRentFromValid(int)
    #int getNumOptionsToAdd()
    #int getOptionIdxToAdd()
    #int getMaxToolsRentable()
    +rentTools()
}
class CasualCustomer
{
    +CasualCustomer(String)
    +String getType()
    +int getNumToolsToRent()
    +int getRentalTime()
}
class BusinessCustomer
{
    +CasualCustomer(String)
    +String getType()
    +int getNumToolsToRent()
    +int getRentalTime()
}
class RegularCustomer
{
    +CasualCustomer(String)
    +String getType()
    +int getNumToolsToRent()
    +int getRentalTime()
}

Customer <|-down- CasualCustomer
Customer <|-down- BusinessCustomer
Customer <|-down- RegularCustomer

abstract class Observable
{
    + registerObserver()
    + removeObserver()
    + notifyObservers()
    - List[Observer] observers
}

Observable <|-down- Customer

abstract class Observer <<interface>>
{
    + update()
}

Observer <|-down- Store

Observable --> "*" Observer: observers

class CustomerPool
{
    -Queue[Customer] customers
    -{static}bool isShutdown
    -{static}CustomerPool instance
    -CustomerPool()
    +{static}CustomerPool getInstance()
    +shuffle()
    +int poolCount()
    +Customer get()
    +release(Customer)
    +shutdown()
}

class Main
{
    + main()
}

class SimpleToolFactory
{
    + createTool(String)
}

ToolshopInventory --> "1" SimpleToolFactory

@enduml
